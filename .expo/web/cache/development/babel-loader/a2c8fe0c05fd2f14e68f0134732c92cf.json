{"ast":null,"code":"var _jsxFileName = \"/home/jmurphy/Documentos/Code/proyectos/identihack/front/front-civi/screens/TabOneScreen.tsx\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Linking from \"react-native-web/dist/exports/Linking\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport EditScreenInfo from \"../components/EditScreenInfo\";\nimport { Text, View } from \"../components/Themed\";\nexport default function TabOneScreen() {\n  var openApp = function openApp(_ref) {\n    var dynamicLink, deepLink, canOpenURL, link;\n    return _regeneratorRuntime.async(function openApp$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            dynamicLink = _ref.dynamicLink, deepLink = _ref.deepLink;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(Linking.canOpenURL(deepLink));\n\n          case 3:\n            canOpenURL = _context.sent;\n\n            if (canOpenURL) {\n              link = Linking.openURL(deepLink);\n              console.log('y?', link);\n            } else {\n              Linking.openURL(dynamicLink);\n            }\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var links = {\n    login: {\n      deepLink: \"aidi://pepe\",\n      dynamicLink: \"http://127.0.0.1\"\n    },\n    credentials: {\n      deepLink: \"aidi://credentials/ronda\",\n      dynamicLink: \"\"\n    },\n    playstore: \"https://play.google.com/apps/internaltest/4699395559909911910\",\n    urlPlaystore: \"https://play.google.com/store/apps/details?id=com.aidi\"\n  };\n\n  var onLoginWithAidi = function onLoginWithAidi() {\n    return _regeneratorRuntime.async(function onLoginWithAidi$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            console.log(links.login);\n            openApp(links.login);\n\n          case 2:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }\n  }, React.createElement(Text, {\n    style: styles.title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }\n  }, \"Tab One\"), React.createElement(Button, {\n    onPress: onLoginWithAidi,\n    title: \"qweqwe\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }\n  }, \"Conectar\"), React.createElement(View, {\n    style: styles.separator,\n    lightColor: \"#eee\",\n    darkColor: \"rgba(255,255,255,0.1)\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }\n  }), React.createElement(EditScreenInfo, {\n    path: \"/screens/TabOneScreen.tsx\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }\n  }));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold'\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%'\n  }\n});","map":{"version":3,"sources":["/home/jmurphy/Documentos/Code/proyectos/identihack/front/front-civi/screens/TabOneScreen.tsx"],"names":["React","EditScreenInfo","Text","View","TabOneScreen","openApp","dynamicLink","deepLink","Linking","canOpenURL","link","openURL","console","log","links","login","credentials","playstore","urlPlaystore","onLoginWithAidi","styles","container","title","separator","StyleSheet","create","flex","alignItems","justifyContent","fontSize","fontWeight","marginVertical","height","width"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;;;AAQA,OAAOC,cAAP;AACA,SAASC,IAAT,EAAeC,IAAf;AAGA,eAAe,SAASC,YAAT,GAAwB;AACnC,MAAMC,OAAO,GAAG,SAAVA,OAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAASC,YAAAA,WAAT,QAASA,WAAT,EAAsBC,QAAtB,QAAsBA,QAAtB;AAAA;AAAA,6CACWC,OAAO,CAACC,UAAR,CAAmBF,QAAnB,CADX;;AAAA;AACRE,YAAAA,UADQ;;AAEd,gBAAIA,UAAJ,EAAe;AACPC,cAAAA,IADO,GACAF,OAAO,CAACG,OAAR,CAAgBJ,QAAhB,CADA;AAEbK,cAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ,EAAkBH,IAAlB;AACD,aAHD,MAGO;AACLF,cAAAA,OAAO,CAACG,OAAR,CAAgBL,WAAhB;AACD;;AAPa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAhB;;AASA,MAAMQ,KAAK,GAAG;AACZC,IAAAA,KAAK,EAAE;AACLR,MAAAA,QAAQ,EAAE,aADL;AAELD,MAAAA,WAAW;AAFN,KADK;AAKZU,IAAAA,WAAW,EAAE;AACXT,MAAAA,QAAQ,4BADG;AAEXD,MAAAA,WAAW;AAFA,KALD;AASZW,IAAAA,SAAS,EAAE,+DATC;AAUZC,IAAAA,YAAY,EAAE;AAVF,GAAd;;AAcH,MAAMC,eAAe,GAAG,SAAlBA,eAAkB;AAAA;AAAA;AAAA;AAAA;AACpBP,YAAAA,OAAO,CAACC,GAAR,CAAYC,KAAK,CAACC,KAAlB;AACAV,YAAAA,OAAO,CAACS,KAAK,CAACC,KAAP,CAAP;;AAFoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAxB;;AAIC,SACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEK,MAAM,CAACC,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAED,MAAM,CAACE,KAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,EAEI,oBAAC,MAAD;AACI,IAAA,OAAO,EAAEH,eADb;AAC8B,IAAA,KAAK,EAAC,QADpC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ,EAME,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEC,MAAM,CAACG,SAApB;AAA+B,IAAA,UAAU,EAAC,MAA1C;AAAiD,IAAA,SAAS,EAAC,uBAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANF,EAOE,oBAAC,cAAD;AAAgB,IAAA,IAAI,EAAC,2BAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPF,CADF;AAWD;AAED,IAAMH,MAAM,GAAGI,UAAU,CAACC,MAAX,CAAkB;AAC/BJ,EAAAA,SAAS,EAAE;AACTK,IAAAA,IAAI,EAAE,CADG;AAETC,IAAAA,UAAU,EAAE,QAFH;AAGTC,IAAAA,cAAc,EAAE;AAHP,GADoB;AAM/BN,EAAAA,KAAK,EAAE;AACLO,IAAAA,QAAQ,EAAE,EADL;AAELC,IAAAA,UAAU,EAAE;AAFP,GANwB;AAU/BP,EAAAA,SAAS,EAAE;AACTQ,IAAAA,cAAc,EAAE,EADP;AAETC,IAAAA,MAAM,EAAE,CAFC;AAGTC,IAAAA,KAAK,EAAE;AAHE;AAVoB,CAAlB,CAAf","sourcesContent":["import * as React from 'react';\nimport {\n  StyleSheet,\n  Linking,\n  Button\n} from \"react-native\";\n//import Config from \"react-native-config\";\n\nimport EditScreenInfo from '../components/EditScreenInfo';\nimport { Text, View } from '../components/Themed';\n\n\nexport default function TabOneScreen() {\n    const openApp = async ({ dynamicLink, deepLink }) => {\n      const canOpenURL = await Linking.canOpenURL(deepLink);\n      if (canOpenURL){\n        const link = Linking.openURL(deepLink);\n        console.log('y?', link);\n      } else {\n        Linking.openURL(dynamicLink);\n      }\n    };\n    const links = {\n      login: {\n        deepLink: \"aidi://pepe\",\n        dynamicLink: `http://127.0.0.1`,\n      },\n      credentials: {\n        deepLink: `aidi://credentials/ronda`,\n        dynamicLink: ``,\n      },\n      playstore: \"https://play.google.com/apps/internaltest/4699395559909911910\",\n      urlPlaystore: \"https://play.google.com/store/apps/details?id=com.aidi\",\n    };\n\n\n const onLoginWithAidi = async () => {\n     console.log(links.login)\n     openApp(links.login)\n  };\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>Tab One</Text>\n        <Button\n            onPress={onLoginWithAidi} title=\"qweqwe\">\n            Conectar\n        </Button>\n      <View style={styles.separator} lightColor=\"#eee\" darkColor=\"rgba(255,255,255,0.1)\" />\n      <EditScreenInfo path=\"/screens/TabOneScreen.tsx\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}